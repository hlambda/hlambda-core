{"version":3,"sources":["webpack://merge-conflict/./node_modules/vscode-nls/lib/browser/main.js","webpack://merge-conflict/./node_modules/vscode-nls/lib/common/common.js","webpack://merge-conflict/./node_modules/vscode-nls/lib/common/ral.js","webpack://merge-conflict/./src/codelensProvider.ts","webpack://merge-conflict/./src/commandHandler.ts","webpack://merge-conflict/./src/contentProvider.ts","webpack://merge-conflict/./src/delayer.ts","webpack://merge-conflict/./src/documentMergeConflict.ts","webpack://merge-conflict/./src/documentTracker.ts","webpack://merge-conflict/./src/mergeConflictParser.ts","webpack://merge-conflict/./src/mergeDecorator.ts","webpack://merge-conflict/./src/services.ts","webpack://merge-conflict/external \"vscode\"","webpack://merge-conflict/webpack/bootstrap","webpack://merge-conflict/./src/mergeConflictMain.ts"],"names":["__spreadArrays","this","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","exports","value","config","loadMessageBundle","ral_1","common_1","common_2","_file","key","message","args","_i","Error","localize","apply","options","setPseudo","locale","toLowerCase","enumerable","get","MessageFormat","BundleFormat","default","install","freeze","format","isPseudo","isDefined","LocalizeInfo","replace","match","rest","index","arg","replacement","String","is","candidate","comment","pseudo","_key","file","opts","_ral","RAL","undefined","ral","constructor","trackerService","tracker","createTracker","begin","enableCodeLens","registerCodeLensProvider","configurationUpdated","updatedConfig","codeLensRegistrationHandle","dispose","document","_token","conflicts","getConflicts","conflictsCount","vscode","commands","executeCommand","items","forEach","conflict","acceptCurrentCommand","command","title","acceptIncomingCommand","acceptBothCommand","diffCommand","push","CodeLens","range","with","start","character","languages","scheme","NavigationDirection","disposables","registerTextEditorCommand","acceptCurrent","acceptIncoming","acceptSelection","acceptBoth","acceptAllCurrent","acceptAllCurrentResources","acceptAllIncoming","acceptAllIncomingResources","acceptAllBoth","navigateNext","navigatePrevious","compare","cb","resourceCB","registerCommand","every","resourceUri","call","map","editor","window","activeTextEditor","accept","acceptAll","resources","acceptAllResources","findConflictContainingSelection","showWarningMessage","uri","current","content","leftRanges","rightRanges","incoming","leftUri","query","JSON","stringify","ranges","rightUri","mergeConflictLineOffsets","nextconflict","isEqual","end","line","selection","Range","docPath","path","fileName","substring","lastIndexOf","openToTheSide","workspace","getConfiguration","viewColumn","ViewColumn","Beside","Active","navigate","Forwards","Backwards","typeToAccept","tokenAfterCurrentBlock","splitter","commonAncestors","header","active","isBefore","isAfter","forget","commitEdit","disposable","direction","navigationResult","findConflictForNavigation","canNavigate","Selection","revealRange","TextEditorRevealType","Default","type","edit","applyEdit","documents","Promise","all","resource","openTextDocument","WorkspaceEdit","newText","contains","predicate","fallback","scanOrder","slice","reverse","MergeConflictContentProvider","context","subscriptions","registerTextDocumentContentProvider","parse","text","lastPosition","Position","rangeObj","conflictRange","fullRange","fullStart","fullEnd","getText","documentEnd","lineAt","lineCount","ex","showErrorMessage","defaultDelay","timeout","completionPromise","onSuccess","task","trigger","delay","cancelTimeout","resolve","then","result","setTimeout","forceDelivery","isTriggered","cancel","clearTimeout","descriptor","replaceRangeWithContent","currentContent","incomingContent","concat","isNewlineOnly","ScanTask","delayTime","initialOrigin","origins","Set","add","delayTask","Delayer","addOrigin","name","hasOrigin","has","OriginDocumentMergeConflictTracker","parent","origin","isPending","cache","Map","delayExpireTime","getCacheKey","getConflictsOrEmpty","cacheItem","set","from","delete","clear","_origins","MergeConflictParser","containsConflict","scanDocument","toString","startHeaderMarker","commonAncestorsMarker","endFooterMarker","currentConflict","conflictDescriptors","isEmptyOrWhitespace","startsWith","startHeader","endFooter","completeDescriptor","scanItemTolMergeConflictDescriptor","filter","Boolean","DocumentMergeConflict","scanned","decoratorContent","rangeIncludingLineBreak","shiftBackOneCharacter","currentTokenLine","nextTokenLine","includes","unlessEqual","decorations","decorationUsesWholeLine","updating","registerDecorationTypes","visibleTextEditors","e","applyDecorations","onDidOpenTextDocument","event","applyDecorationsFromEvent","onDidChangeTextDocument","onDidChangeVisibleTextEditors","removeDecorations","keys","enableDecorations","enableEditorOverview","createTextEditorDecorationType","generateBlockRenderOptions","isWholeLine","backgroundColor","ThemeColor","color","outlineStyle","outlineWidth","outlineColor","after","contentText","overviewRulerColor","renderOptions","overviewRulerLane","OverviewRulerLane","Full","eventDocument","indexOf","matchDecorations","pushDecoration","d","isEmpty","commonAncestorsRegion","decorationKey","decorationType","setDecorations","services","configuration","createExtensionConfiguration","documentTracker","service","Function","onDidChangeConfiguration","workspaceConfiguration","codeLensEnabled","decoratorsEnabled","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"mappings":"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","file":"mergeConflictMain.js","sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.config = exports.loadMessageBundle = void 0;\nvar ral_1 = require(\"../common/ral\");\nvar common_1 = require(\"../common/common\");\nvar common_2 = require(\"../common/common\");\nObject.defineProperty(exports, \"MessageFormat\", { enumerable: true, get: function () { return common_2.MessageFormat; } });\nObject.defineProperty(exports, \"BundleFormat\", { enumerable: true, get: function () { return common_2.BundleFormat; } });\nfunction loadMessageBundle(_file) {\n    return function (key, message) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        if (typeof key === 'number') {\n            throw new Error(\"Browser implementation does currently not support externalized strings.\");\n        }\n        else {\n            return common_1.localize.apply(void 0, __spreadArrays([key, message], args));\n        }\n    };\n}\nexports.loadMessageBundle = loadMessageBundle;\nfunction config(options) {\n    common_1.setPseudo((options === null || options === void 0 ? void 0 : options.locale.toLowerCase()) === 'pseudo');\n    return loadMessageBundle;\n}\nexports.config = config;\nral_1.default.install(Object.freeze({\n    loadMessageBundle: loadMessageBundle,\n    config: config\n}));\n//# sourceMappingURL=main.js.map","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.config = exports.loadMessageBundle = exports.localize = exports.format = exports.setPseudo = exports.isPseudo = exports.isDefined = exports.BundleFormat = exports.MessageFormat = void 0;\nvar ral_1 = require(\"./ral\");\nvar MessageFormat;\n(function (MessageFormat) {\n    MessageFormat[\"file\"] = \"file\";\n    MessageFormat[\"bundle\"] = \"bundle\";\n    MessageFormat[\"both\"] = \"both\";\n})(MessageFormat = exports.MessageFormat || (exports.MessageFormat = {}));\nvar BundleFormat;\n(function (BundleFormat) {\n    // the nls.bundle format\n    BundleFormat[\"standalone\"] = \"standalone\";\n    BundleFormat[\"languagePack\"] = \"languagePack\";\n})(BundleFormat = exports.BundleFormat || (exports.BundleFormat = {}));\nvar LocalizeInfo;\n(function (LocalizeInfo) {\n    function is(value) {\n        var candidate = value;\n        return candidate && isDefined(candidate.key) && isDefined(candidate.comment);\n    }\n    LocalizeInfo.is = is;\n})(LocalizeInfo || (LocalizeInfo = {}));\nfunction isDefined(value) {\n    return typeof value !== 'undefined';\n}\nexports.isDefined = isDefined;\nexports.isPseudo = false;\nfunction setPseudo(pseudo) {\n    exports.isPseudo = pseudo;\n}\nexports.setPseudo = setPseudo;\nfunction format(message, args) {\n    var result;\n    if (exports.isPseudo) {\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n        message = '\\uFF3B' + message.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n    }\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n            var index = rest[0];\n            var arg = args[index];\n            var replacement = match;\n            if (typeof arg === 'string') {\n                replacement = arg;\n            }\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n                replacement = String(arg);\n            }\n            return replacement;\n        });\n    }\n    return result;\n}\nexports.format = format;\nfunction localize(_key, message) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    return format(message, args);\n}\nexports.localize = localize;\nfunction loadMessageBundle(file) {\n    return ral_1.default().loadMessageBundle(file);\n}\nexports.loadMessageBundle = loadMessageBundle;\nfunction config(opts) {\n    return ral_1.default().config(opts);\n}\nexports.config = config;\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(\"No runtime abstraction layer installed\");\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(\"No runtime abstraction layer provided\");\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n//# sourceMappingURL=ral.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\nexport default class MergeConflictCodeLensProvider implements vscode.CodeLensProvider, vscode.Disposable {\n\tprivate codeLensRegistrationHandle?: vscode.Disposable | null;\n\tprivate config?: interfaces.IExtensionConfiguration;\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\n\tconstructor(trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('codelens');\n\t}\n\n\tbegin(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\n\t\tif (this.config.enableCodeLens) {\n\t\t\tthis.registerCodeLensProvider();\n\t\t}\n\t}\n\n\tconfigurationUpdated(updatedConfig: interfaces.IExtensionConfiguration) {\n\n\t\tif (updatedConfig.enableCodeLens === false && this.codeLensRegistrationHandle) {\n\t\t\tthis.codeLensRegistrationHandle.dispose();\n\t\t\tthis.codeLensRegistrationHandle = null;\n\t\t}\n\t\telse if (updatedConfig.enableCodeLens === true && !this.codeLensRegistrationHandle) {\n\t\t\tthis.registerCodeLensProvider();\n\t\t}\n\n\t\tthis.config = updatedConfig;\n\t}\n\n\n\tdispose() {\n\t\tif (this.codeLensRegistrationHandle) {\n\t\t\tthis.codeLensRegistrationHandle.dispose();\n\t\t\tthis.codeLensRegistrationHandle = null;\n\t\t}\n\t}\n\n\tasync provideCodeLenses(document: vscode.TextDocument, _token: vscode.CancellationToken): Promise<vscode.CodeLens[] | null> {\n\n\t\tif (!this.config || !this.config.enableCodeLens) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst conflicts = await this.tracker.getConflicts(document);\n\t\tconst conflictsCount = conflicts?.length ?? 0;\n\t\tvscode.commands.executeCommand('setContext', 'mergeConflictsCount', conflictsCount);\n\n\t\tif (!conflictsCount) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst items: vscode.CodeLens[] = [];\n\n\t\tconflicts.forEach(conflict => {\n\t\t\tconst acceptCurrentCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.current',\n\t\t\t\ttitle: localize('acceptCurrentChange', 'Accept Current Change'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tconst acceptIncomingCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.incoming',\n\t\t\t\ttitle: localize('acceptIncomingChange', 'Accept Incoming Change'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tconst acceptBothCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.accept.both',\n\t\t\t\ttitle: localize('acceptBothChanges', 'Accept Both Changes'),\n\t\t\t\targuments: ['known-conflict', conflict]\n\t\t\t};\n\n\t\t\tconst diffCommand: vscode.Command = {\n\t\t\t\tcommand: 'merge-conflict.compare',\n\t\t\t\ttitle: localize('compareChanges', 'Compare Changes'),\n\t\t\t\targuments: [conflict]\n\t\t\t};\n\n\t\t\titems.push(\n\t\t\t\tnew vscode.CodeLens(conflict.range, acceptCurrentCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 1 })), acceptIncomingCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 2 })), acceptBothCommand),\n\t\t\t\tnew vscode.CodeLens(conflict.range.with(conflict.range.start.with({ character: conflict.range.start.character + 3 })), diffCommand)\n\t\t\t);\n\t\t});\n\n\t\treturn items;\n\t}\n\n\tprivate registerCodeLensProvider() {\n\t\tthis.codeLensRegistrationHandle = vscode.languages.registerCodeLensProvider([\n\t\t\t{ scheme: 'file' },\n\t\t\t{ scheme: 'vscode-vfs' },\n\t\t\t{ scheme: 'untitled' },\n\t\t\t{ scheme: 'vscode-userdata' },\n\t\t], this);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport ContentProvider from './contentProvider';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\ninterface IDocumentMergeConflictNavigationResults {\n\tcanNavigate: boolean;\n\tconflict?: interfaces.IDocumentMergeConflict;\n}\n\nenum NavigationDirection {\n\tForwards,\n\tBackwards\n}\n\nexport default class CommandHandler implements vscode.Disposable {\n\n\tprivate disposables: vscode.Disposable[] = [];\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\n\tconstructor(trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('commands');\n\t}\n\n\tbegin() {\n\t\tthis.disposables.push(\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.current', this.acceptCurrent),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.incoming', this.acceptIncoming),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.selection', this.acceptSelection),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.both', this.acceptBoth),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-current', this.acceptAllCurrent, this.acceptAllCurrentResources),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-incoming', this.acceptAllIncoming, this.acceptAllIncomingResources),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.accept.all-both', this.acceptAllBoth),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.next', this.navigateNext),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.previous', this.navigatePrevious),\n\t\t\tthis.registerTextEditorCommand('merge-conflict.compare', this.compare)\n\t\t);\n\t}\n\n\tprivate registerTextEditorCommand(command: string, cb: (editor: vscode.TextEditor, ...args: any[]) => Promise<void>, resourceCB?: (uris: vscode.Uri[]) => Promise<void>) {\n\t\treturn vscode.commands.registerCommand(command, (...args) => {\n\t\t\tif (resourceCB && args.length && args.every(arg => arg && arg.resourceUri)) {\n\t\t\t\treturn resourceCB.call(this, args.map(arg => arg.resourceUri));\n\t\t\t}\n\t\t\tconst editor = vscode.window.activeTextEditor;\n\t\t\treturn editor && cb.call(this, editor, ...args);\n\t\t});\n\t}\n\n\tacceptCurrent(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Current, editor, ...args);\n\t}\n\n\tacceptIncoming(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Incoming, editor, ...args);\n\t}\n\n\tacceptBoth(editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\t\treturn this.accept(interfaces.CommitType.Both, editor, ...args);\n\t}\n\n\tacceptAllCurrent(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Current, editor);\n\t}\n\n\tacceptAllIncoming(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Incoming, editor);\n\t}\n\n\tacceptAllCurrentResources(resources: vscode.Uri[]): Promise<void> {\n\t\treturn this.acceptAllResources(interfaces.CommitType.Current, resources);\n\t}\n\n\tacceptAllIncomingResources(resources: vscode.Uri[]): Promise<void> {\n\t\treturn this.acceptAllResources(interfaces.CommitType.Incoming, resources);\n\t}\n\n\tacceptAllBoth(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.acceptAll(interfaces.CommitType.Both, editor);\n\t}\n\n\tasync compare(editor: vscode.TextEditor, conflict: interfaces.IDocumentMergeConflict | null) {\n\n\t\t// No conflict, command executed from command palette\n\t\tif (!conflict) {\n\t\t\tconflict = await this.findConflictContainingSelection(editor);\n\n\t\t\t// Still failed to find conflict, warn the user and exit\n\t\t\tif (!conflict) {\n\t\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst conflicts = await this.tracker.getConflicts(editor.document);\n\n\t\t// Still failed to find conflict, warn the user and exit\n\t\tif (!conflicts) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\tconst scheme = editor.document.uri.scheme;\n\t\tlet range = conflict.current.content;\n\t\tconst leftRanges = conflicts.map(conflict => [conflict.current.content, conflict.range]);\n\t\tconst rightRanges = conflicts.map(conflict => [conflict.incoming.content, conflict.range]);\n\n\t\tconst leftUri = editor.document.uri.with({\n\t\t\tscheme: ContentProvider.scheme,\n\t\t\tquery: JSON.stringify({ scheme, range: range, ranges: leftRanges })\n\t\t});\n\n\n\t\trange = conflict.incoming.content;\n\t\tconst rightUri = leftUri.with({ query: JSON.stringify({ scheme, ranges: rightRanges }) });\n\n\t\tlet mergeConflictLineOffsets = 0;\n\t\tfor (const nextconflict of conflicts) {\n\t\t\tif (nextconflict.range.isEqual(conflict.range)) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tmergeConflictLineOffsets += (nextconflict.range.end.line - nextconflict.range.start.line) - (nextconflict.incoming.content.end.line - nextconflict.incoming.content.start.line);\n\t\t\t}\n\t\t}\n\t\tconst selection = new vscode.Range(\n\t\t\tconflict.range.start.line - mergeConflictLineOffsets, conflict.range.start.character,\n\t\t\tconflict.range.start.line - mergeConflictLineOffsets, conflict.range.start.character\n\t\t);\n\n\t\tconst docPath = editor.document.uri.path;\n\t\tconst fileName = docPath.substring(docPath.lastIndexOf('/') + 1); // avoid NodeJS path to keep browser webpack small\n\t\tconst title = localize('compareChangesTitle', '{0}: Current Changes ↔ Incoming Changes', fileName);\n\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\tconst openToTheSide = mergeConflictConfig.get<string>('diffViewPosition');\n\t\tconst opts: vscode.TextDocumentShowOptions = {\n\t\t\tviewColumn: openToTheSide === 'Beside' ? vscode.ViewColumn.Beside : vscode.ViewColumn.Active,\n\t\t\tselection\n\t\t};\n\n\t\tif (openToTheSide === 'Below') {\n\t\t\tawait vscode.commands.executeCommand('workbench.action.newGroupBelow');\n\t\t}\n\n\t\tawait vscode.commands.executeCommand('vscode.diff', leftUri, rightUri, title, opts);\n\t}\n\n\tnavigateNext(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.navigate(editor, NavigationDirection.Forwards);\n\t}\n\n\tnavigatePrevious(editor: vscode.TextEditor): Promise<void> {\n\t\treturn this.navigate(editor, NavigationDirection.Backwards);\n\t}\n\n\tasync acceptSelection(editor: vscode.TextEditor): Promise<void> {\n\t\tconst conflict = await this.findConflictContainingSelection(editor);\n\n\t\tif (!conflict) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\tlet typeToAccept: interfaces.CommitType;\n\t\tlet tokenAfterCurrentBlock: vscode.Range = conflict.splitter;\n\n\t\tif (conflict.commonAncestors.length > 0) {\n\t\t\ttokenAfterCurrentBlock = conflict.commonAncestors[0].header;\n\t\t}\n\n\t\t// Figure out if the cursor is in current or incoming, we do this by seeing if\n\t\t// the active position is before or after the range of the splitter or common\n\t\t// ancestors marker. We can use this trick as the previous check in\n\t\t// findConflictByActiveSelection will ensure it's within the conflict range, so\n\t\t// we don't falsely identify \"current\" or \"incoming\" if outside of a conflict range.\n\t\tif (editor.selection.active.isBefore(tokenAfterCurrentBlock.start)) {\n\t\t\ttypeToAccept = interfaces.CommitType.Current;\n\t\t}\n\t\telse if (editor.selection.active.isAfter(conflict.splitter.end)) {\n\t\t\ttypeToAccept = interfaces.CommitType.Incoming;\n\t\t}\n\t\telse if (editor.selection.active.isBefore(conflict.splitter.start)) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorOnCommonAncestorsRange', 'Editor cursor is within the common ancestors block, please move it to either the \"current\" or \"incoming\" block'));\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tvscode.window.showWarningMessage(localize('cursorOnSplitterRange', 'Editor cursor is within the merge conflict splitter, please move it to either the \"current\" or \"incoming\" block'));\n\t\t\treturn;\n\t\t}\n\n\t\tthis.tracker.forget(editor.document);\n\t\tconflict.commitEdit(typeToAccept, editor);\n\t}\n\n\tdispose() {\n\t\tthis.disposables.forEach(disposable => disposable.dispose());\n\t\tthis.disposables = [];\n\t}\n\n\tprivate async navigate(editor: vscode.TextEditor, direction: NavigationDirection): Promise<void> {\n\t\tconst navigationResult = await this.findConflictForNavigation(editor, direction);\n\n\t\tif (!navigationResult) {\n\t\t\t// Check for autoNavigateNextConflict, if it's enabled(which indicating no conflict remain), then do not show warning\n\t\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\t\tif (mergeConflictConfig.get<boolean>('autoNavigateNextConflict.enabled')) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvscode.window.showWarningMessage(localize('noConflicts', 'No merge conflicts found in this file'));\n\t\t\treturn;\n\t\t}\n\t\telse if (!navigationResult.canNavigate) {\n\t\t\tvscode.window.showWarningMessage(localize('noOtherConflictsInThisFile', 'No other merge conflicts within this file'));\n\t\t\treturn;\n\t\t}\n\t\telse if (!navigationResult.conflict) {\n\t\t\t// TODO: Show error message?\n\t\t\treturn;\n\t\t}\n\n\t\t// Move the selection to the first line of the conflict\n\t\teditor.selection = new vscode.Selection(navigationResult.conflict.range.start, navigationResult.conflict.range.start);\n\t\teditor.revealRange(navigationResult.conflict.range, vscode.TextEditorRevealType.Default);\n\t}\n\n\tprivate async accept(type: interfaces.CommitType, editor: vscode.TextEditor, ...args: any[]): Promise<void> {\n\n\t\tlet conflict: interfaces.IDocumentMergeConflict | null;\n\n\t\t// If launched with known context, take the conflict from that\n\t\tif (args[0] === 'known-conflict') {\n\t\t\tconflict = args[1];\n\t\t}\n\t\telse {\n\t\t\t// Attempt to find a conflict that matches the current cursor position\n\t\t\tconflict = await this.findConflictContainingSelection(editor);\n\t\t}\n\n\t\tif (!conflict) {\n\t\t\tvscode.window.showWarningMessage(localize('cursorNotInConflict', 'Editor cursor is not within a merge conflict'));\n\t\t\treturn;\n\t\t}\n\n\t\t// Tracker can forget as we know we are going to do an edit\n\t\tthis.tracker.forget(editor.document);\n\t\tconflict.commitEdit(type, editor);\n\n\t\t// navigate to the next merge conflict\n\t\tconst mergeConflictConfig = vscode.workspace.getConfiguration('merge-conflict');\n\t\tif (mergeConflictConfig.get<boolean>('autoNavigateNextConflict.enabled')) {\n\t\t\tthis.navigateNext(editor);\n\t\t}\n\n\t}\n\n\tprivate async acceptAll(type: interfaces.CommitType, editor: vscode.TextEditor): Promise<void> {\n\t\tconst conflicts = await this.tracker.getConflicts(editor.document);\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\tvscode.window.showWarningMessage(localize('noConflicts', 'No merge conflicts found in this file'));\n\t\t\treturn;\n\t\t}\n\n\t\t// For get the current state of the document, as we know we are doing to do a large edit\n\t\tthis.tracker.forget(editor.document);\n\n\t\t// Apply all changes as one edit\n\t\tawait editor.edit((edit) => conflicts.forEach(conflict => {\n\t\t\tconflict.applyEdit(type, editor.document, edit);\n\t\t}));\n\t}\n\n\tprivate async acceptAllResources(type: interfaces.CommitType, resources: vscode.Uri[]): Promise<void> {\n\t\tconst documents = await Promise.all(resources.map(resource => vscode.workspace.openTextDocument(resource)));\n\t\tconst edit = new vscode.WorkspaceEdit();\n\t\tfor (const document of documents) {\n\t\t\tconst conflicts = await this.tracker.getConflicts(document);\n\n\t\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// For get the current state of the document, as we know we are doing to do a large edit\n\t\t\tthis.tracker.forget(document);\n\n\t\t\t// Apply all changes as one edit\n\t\t\tconflicts.forEach(conflict => {\n\t\t\t\tconflict.applyEdit(type, document, { replace: (range, newText) => edit.replace(document.uri, range, newText) });\n\t\t\t});\n\t\t}\n\t\tvscode.workspace.applyEdit(edit);\n\t}\n\n\tprivate async findConflictContainingSelection(editor: vscode.TextEditor, conflicts?: interfaces.IDocumentMergeConflict[]): Promise<interfaces.IDocumentMergeConflict | null> {\n\n\t\tif (!conflicts) {\n\t\t\tconflicts = await this.tracker.getConflicts(editor.document);\n\t\t}\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (const conflict of conflicts) {\n\t\t\tif (conflict.range.contains(editor.selection.active)) {\n\t\t\t\treturn conflict;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate async findConflictForNavigation(editor: vscode.TextEditor, direction: NavigationDirection, conflicts?: interfaces.IDocumentMergeConflict[]): Promise<IDocumentMergeConflictNavigationResults | null> {\n\t\tif (!conflicts) {\n\t\t\tconflicts = await this.tracker.getConflicts(editor.document);\n\t\t}\n\n\t\tif (!conflicts || conflicts.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst selection = editor.selection.active;\n\t\tif (conflicts.length === 1) {\n\t\t\tif (conflicts[0].range.contains(selection)) {\n\t\t\t\treturn {\n\t\t\t\t\tcanNavigate: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcanNavigate: true,\n\t\t\t\tconflict: conflicts[0]\n\t\t\t};\n\t\t}\n\n\t\tlet predicate: (_conflict: any) => boolean;\n\t\tlet fallback: () => interfaces.IDocumentMergeConflict;\n\t\tlet scanOrder: interfaces.IDocumentMergeConflict[];\n\n\t\tif (direction === NavigationDirection.Forwards) {\n\t\t\tpredicate = (conflict) => selection.isBefore(conflict.range.start);\n\t\t\tfallback = () => conflicts![0];\n\t\t\tscanOrder = conflicts;\n\t\t} else if (direction === NavigationDirection.Backwards) {\n\t\t\tpredicate = (conflict) => selection.isAfter(conflict.range.start);\n\t\t\tfallback = () => conflicts![conflicts!.length - 1];\n\t\t\tscanOrder = conflicts.slice().reverse();\n\t\t} else {\n\t\t\tthrow new Error(`Unsupported direction ${direction}`);\n\t\t}\n\n\t\tfor (const conflict of scanOrder) {\n\t\t\tif (predicate(conflict) && !conflict.range.contains(selection)) {\n\t\t\t\treturn {\n\t\t\t\t\tcanNavigate: true,\n\t\t\t\t\tconflict: conflict\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Went all the way to the end, return the head\n\t\treturn {\n\t\t\tcanNavigate: true,\n\t\t\tconflict: fallback()\n\t\t};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\n\nexport default class MergeConflictContentProvider implements vscode.TextDocumentContentProvider, vscode.Disposable {\n\n\tstatic scheme = 'merge-conflict.conflict-diff';\n\n\tconstructor(private context: vscode.ExtensionContext) {\n\t}\n\n\tbegin() {\n\t\tthis.context.subscriptions.push(\n\t\t\tvscode.workspace.registerTextDocumentContentProvider(MergeConflictContentProvider.scheme, this)\n\t\t);\n\t}\n\n\tdispose() {\n\t}\n\n\tasync provideTextDocumentContent(uri: vscode.Uri): Promise<string | null> {\n\t\ttry {\n\t\t\tconst { scheme, ranges } = JSON.parse(uri.query) as { scheme: string; ranges: [{ line: number; character: number }[], { line: number; character: number }[]][] };\n\n\t\t\t// complete diff\n\t\t\tconst document = await vscode.workspace.openTextDocument(uri.with({ scheme, query: '' }));\n\n\t\t\tlet text = '';\n\t\t\tlet lastPosition = new vscode.Position(0, 0);\n\n\t\t\tranges.forEach(rangeObj => {\n\t\t\t\tconst [conflictRange, fullRange] = rangeObj;\n\t\t\t\tconst [start, end] = conflictRange;\n\t\t\t\tconst [fullStart, fullEnd] = fullRange;\n\n\t\t\t\ttext += document.getText(new vscode.Range(lastPosition.line, lastPosition.character, fullStart.line, fullStart.character));\n\t\t\t\ttext += document.getText(new vscode.Range(start.line, start.character, end.line, end.character));\n\t\t\t\tlastPosition = new vscode.Position(fullEnd.line, fullEnd.character);\n\t\t\t});\n\n\t\t\tconst documentEnd = document.lineAt(document.lineCount - 1).range.end;\n\t\t\ttext += document.getText(new vscode.Range(lastPosition.line, lastPosition.character, documentEnd.line, documentEnd.character));\n\n\t\t\treturn text;\n\t\t}\n\t\tcatch (ex) {\n\t\t\tawait vscode.window.showErrorMessage('Unable to show comparison');\n\t\t\treturn null;\n\t\t}\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface ITask<T> {\n\t(): T;\n}\n\nexport class Delayer<T> {\n\n\tpublic defaultDelay: number;\n\tprivate timeout: any; // Timer\n\tprivate completionPromise: Promise<T> | null;\n\tprivate onSuccess: ((value: T | PromiseLike<T> | undefined) => void) | null;\n\tprivate task: ITask<T> | null;\n\n\tconstructor(defaultDelay: number) {\n\t\tthis.defaultDelay = defaultDelay;\n\t\tthis.timeout = null;\n\t\tthis.completionPromise = null;\n\t\tthis.onSuccess = null;\n\t\tthis.task = null;\n\t}\n\n\tpublic trigger(task: ITask<T>, delay: number = this.defaultDelay): Promise<T> {\n\t\tthis.task = task;\n\t\tif (delay >= 0) {\n\t\t\tthis.cancelTimeout();\n\t\t}\n\n\t\tif (!this.completionPromise) {\n\t\t\tthis.completionPromise = new Promise<T | undefined>((resolve) => {\n\t\t\t\tthis.onSuccess = resolve;\n\t\t\t}).then(() => {\n\t\t\t\tthis.completionPromise = null;\n\t\t\t\tthis.onSuccess = null;\n\t\t\t\tconst result = this.task!();\n\t\t\t\tthis.task = null;\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\n\t\tif (delay >= 0 || this.timeout === null) {\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tthis.timeout = null;\n\t\t\t\tthis.onSuccess!(undefined);\n\t\t\t}, delay >= 0 ? delay : this.defaultDelay);\n\t\t}\n\n\t\treturn this.completionPromise;\n\t}\n\n\tpublic forceDelivery(): Promise<T> | null {\n\t\tif (!this.completionPromise) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.cancelTimeout();\n\t\tconst result = this.completionPromise;\n\t\tthis.onSuccess!(undefined);\n\t\treturn result;\n\t}\n\n\tpublic isTriggered(): boolean {\n\t\treturn this.timeout !== null;\n\t}\n\n\tpublic cancel(): void {\n\t\tthis.cancelTimeout();\n\t\tthis.completionPromise = null;\n\t}\n\n\tprivate cancelTimeout(): void {\n\t\tif (this.timeout !== null) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as interfaces from './interfaces';\nimport * as vscode from 'vscode';\n\nexport class DocumentMergeConflict implements interfaces.IDocumentMergeConflict {\n\n\tpublic range: vscode.Range;\n\tpublic current: interfaces.IMergeRegion;\n\tpublic incoming: interfaces.IMergeRegion;\n\tpublic commonAncestors: interfaces.IMergeRegion[];\n\tpublic splitter: vscode.Range;\n\n\tconstructor(descriptor: interfaces.IDocumentMergeConflictDescriptor) {\n\t\tthis.range = descriptor.range;\n\t\tthis.current = descriptor.current;\n\t\tthis.incoming = descriptor.incoming;\n\t\tthis.commonAncestors = descriptor.commonAncestors;\n\t\tthis.splitter = descriptor.splitter;\n\t}\n\n\tpublic commitEdit(type: interfaces.CommitType, editor: vscode.TextEditor, edit?: vscode.TextEditorEdit): Thenable<boolean> {\n\n\t\tif (edit) {\n\n\t\t\tthis.applyEdit(type, editor.document, edit);\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\treturn editor.edit((edit) => this.applyEdit(type, editor.document, edit));\n\t}\n\n\tpublic applyEdit(type: interfaces.CommitType, document: vscode.TextDocument, edit: { replace(range: vscode.Range, newText: string): void }): void {\n\n\t\t// Each conflict is a set of ranges as follows, note placements or newlines\n\t\t// which may not in spans\n\t\t// [ Conflict Range             -- (Entire content below)\n\t\t//   [ Current Header ]\\n       -- >>>>> Header\n\t\t//   [ Current Content ]        -- (content)\n\t\t//   [ Splitter ]\\n             -- =====\n\t\t//   [ Incoming Content ]       -- (content)\n\t\t//   [ Incoming Header ]\\n      -- <<<<< Incoming\n\t\t// ]\n\t\tif (type === interfaces.CommitType.Current) {\n\t\t\t// Replace [ Conflict Range ] with [ Current Content ]\n\t\t\tconst content = document.getText(this.current.content);\n\t\t\tthis.replaceRangeWithContent(content, edit);\n\t\t}\n\t\telse if (type === interfaces.CommitType.Incoming) {\n\t\t\tconst content = document.getText(this.incoming.content);\n\t\t\tthis.replaceRangeWithContent(content, edit);\n\t\t}\n\t\telse if (type === interfaces.CommitType.Both) {\n\t\t\t// Replace [ Conflict Range ] with [ Current Content ] + \\n + [ Incoming Content ]\n\n\t\t\tconst currentContent = document.getText(this.current.content);\n\t\t\tconst incomingContent = document.getText(this.incoming.content);\n\n\t\t\tedit.replace(this.range, currentContent.concat(incomingContent));\n\t\t}\n\t}\n\n\tprivate replaceRangeWithContent(content: string, edit: { replace(range: vscode.Range, newText: string): void }) {\n\t\tif (this.isNewlineOnly(content)) {\n\t\t\tedit.replace(this.range, '');\n\t\t\treturn;\n\t\t}\n\n\t\t// Replace [ Conflict Range ] with [ Current Content ]\n\t\tedit.replace(this.range, content);\n\t}\n\n\tprivate isNewlineOnly(text: string) {\n\t\treturn text === '\\n' || text === '\\r\\n';\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { MergeConflictParser } from './mergeConflictParser';\nimport * as interfaces from './interfaces';\nimport { Delayer } from './delayer';\n\nclass ScanTask {\n\tpublic origins: Set<string> = new Set<string>();\n\tpublic delayTask: Delayer<interfaces.IDocumentMergeConflict[]>;\n\n\tconstructor(delayTime: number, initialOrigin: string) {\n\t\tthis.origins.add(initialOrigin);\n\t\tthis.delayTask = new Delayer<interfaces.IDocumentMergeConflict[]>(delayTime);\n\t}\n\n\tpublic addOrigin(name: string): void {\n\t\tthis.origins.add(name);\n\t}\n\n\tpublic hasOrigin(name: string): boolean {\n\t\treturn this.origins.has(name);\n\t}\n}\n\nclass OriginDocumentMergeConflictTracker implements interfaces.IDocumentMergeConflictTracker {\n\tconstructor(private parent: DocumentMergeConflictTracker, private origin: string) {\n\t}\n\n\tgetConflicts(document: vscode.TextDocument): PromiseLike<interfaces.IDocumentMergeConflict[]> {\n\t\treturn this.parent.getConflicts(document, this.origin);\n\t}\n\n\tisPending(document: vscode.TextDocument): boolean {\n\t\treturn this.parent.isPending(document, this.origin);\n\t}\n\n\tforget(document: vscode.TextDocument) {\n\t\tthis.parent.forget(document);\n\t}\n}\n\nexport default class DocumentMergeConflictTracker implements vscode.Disposable, interfaces.IDocumentMergeConflictTrackerService {\n\tprivate cache: Map<string, ScanTask> = new Map();\n\tprivate delayExpireTime: number = 0;\n\n\tgetConflicts(document: vscode.TextDocument, origin: string): PromiseLike<interfaces.IDocumentMergeConflict[]> {\n\t\t// Attempt from cache\n\n\t\tconst key = this.getCacheKey(document);\n\n\t\tif (!key) {\n\t\t\t// Document doesn't have a uri, can't cache it, so return\n\t\t\treturn Promise.resolve(this.getConflictsOrEmpty(document, [origin]));\n\t\t}\n\n\t\tlet cacheItem = this.cache.get(key);\n\t\tif (!cacheItem) {\n\t\t\tcacheItem = new ScanTask(this.delayExpireTime, origin);\n\t\t\tthis.cache.set(key, cacheItem);\n\t\t}\n\t\telse {\n\t\t\tcacheItem.addOrigin(origin);\n\t\t}\n\n\t\treturn cacheItem.delayTask.trigger(() => {\n\t\t\tconst conflicts = this.getConflictsOrEmpty(document, Array.from(cacheItem!.origins));\n\n\t\t\tthis.cache?.delete(key!);\n\n\t\t\treturn conflicts;\n\t\t});\n\t}\n\n\tisPending(document: vscode.TextDocument, origin: string): boolean {\n\t\tif (!document) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst key = this.getCacheKey(document);\n\t\tif (!key) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst task = this.cache.get(key);\n\t\tif (!task) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn task.hasOrigin(origin);\n\t}\n\n\tcreateTracker(origin: string): interfaces.IDocumentMergeConflictTracker {\n\t\treturn new OriginDocumentMergeConflictTracker(this, origin);\n\t}\n\n\tforget(document: vscode.TextDocument) {\n\t\tconst key = this.getCacheKey(document);\n\n\t\tif (key) {\n\t\t\tthis.cache.delete(key);\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis.cache.clear();\n\t}\n\n\tprivate getConflictsOrEmpty(document: vscode.TextDocument, _origins: string[]): interfaces.IDocumentMergeConflict[] {\n\t\tconst containsConflict = MergeConflictParser.containsConflict(document);\n\n\t\tif (!containsConflict) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst conflicts = MergeConflictParser.scanDocument(document);\n\t\treturn conflicts;\n\t}\n\n\tprivate getCacheKey(document: vscode.TextDocument): string | null {\n\t\tif (document.uri) {\n\t\t\treturn document.uri.toString();\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { DocumentMergeConflict } from './documentMergeConflict';\n\nconst startHeaderMarker = '<<<<<<<';\nconst commonAncestorsMarker = '|||||||';\nconst splitterMarker = '=======';\nconst endFooterMarker = '>>>>>>>';\n\ninterface IScanMergedConflict {\n\tstartHeader: vscode.TextLine;\n\tcommonAncestors: vscode.TextLine[];\n\tsplitter?: vscode.TextLine;\n\tendFooter?: vscode.TextLine;\n}\n\nexport class MergeConflictParser {\n\n\tstatic scanDocument(document: vscode.TextDocument): interfaces.IDocumentMergeConflict[] {\n\n\t\t// Scan each line in the document, we already know there is at least a <<<<<<< and\n\t\t// >>>>>> marker within the document, we need to group these into conflict ranges.\n\t\t// We initially build a scan match, that references the lines of the header, splitter\n\t\t// and footer. This is then converted into a full descriptor containing all required\n\t\t// ranges.\n\n\t\tlet currentConflict: IScanMergedConflict | null = null;\n\t\tconst conflictDescriptors: interfaces.IDocumentMergeConflictDescriptor[] = [];\n\n\t\tfor (let i = 0; i < document.lineCount; i++) {\n\t\t\tconst line = document.lineAt(i);\n\n\t\t\t// Ignore empty lines\n\t\t\tif (!line || line.isEmptyOrWhitespace) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Is this a start line? <<<<<<<\n\t\t\tif (line.text.startsWith(startHeaderMarker)) {\n\t\t\t\tif (currentConflict !== null) {\n\t\t\t\t\t// Error, we should not see a startMarker before we've seen an endMarker\n\t\t\t\t\tcurrentConflict = null;\n\n\t\t\t\t\t// Give up parsing, anything matched up this to this point will be decorated\n\t\t\t\t\t// anything after will not\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Create a new conflict starting at this line\n\t\t\t\tcurrentConflict = { startHeader: line, commonAncestors: [] };\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a common ancestors marker? |||||||\n\t\t\telse if (currentConflict && !currentConflict.splitter && line.text.startsWith(commonAncestorsMarker)) {\n\t\t\t\tcurrentConflict.commonAncestors.push(line);\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a splitter? =======\n\t\t\telse if (currentConflict && !currentConflict.splitter && line.text === splitterMarker) {\n\t\t\t\tcurrentConflict.splitter = line;\n\t\t\t}\n\t\t\t// Are we within a conflict block and is this a footer? >>>>>>>\n\t\t\telse if (currentConflict && line.text.startsWith(endFooterMarker)) {\n\t\t\t\tcurrentConflict.endFooter = line;\n\n\t\t\t\t// Create a full descriptor from the lines that we matched. This can return\n\t\t\t\t// null if the descriptor could not be completed.\n\t\t\t\tconst completeDescriptor = MergeConflictParser.scanItemTolMergeConflictDescriptor(document, currentConflict);\n\n\t\t\t\tif (completeDescriptor !== null) {\n\t\t\t\t\tconflictDescriptors.push(completeDescriptor);\n\t\t\t\t}\n\n\t\t\t\t// Reset the current conflict to be empty, so we can match the next\n\t\t\t\t// starting header marker.\n\t\t\t\tcurrentConflict = null;\n\t\t\t}\n\t\t}\n\n\t\treturn conflictDescriptors\n\t\t\t.filter(Boolean)\n\t\t\t.map(descriptor => new DocumentMergeConflict(descriptor));\n\t}\n\n\tprivate static scanItemTolMergeConflictDescriptor(document: vscode.TextDocument, scanned: IScanMergedConflict): interfaces.IDocumentMergeConflictDescriptor | null {\n\t\t// Validate we have all the required lines within the scan item.\n\t\tif (!scanned.startHeader || !scanned.splitter || !scanned.endFooter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst tokenAfterCurrentBlock: vscode.TextLine = scanned.commonAncestors[0] || scanned.splitter;\n\n\t\t// Assume that descriptor.current.header, descriptor.incoming.header and descriptor.splitter\n\t\t// have valid ranges, fill in content and total ranges from these parts.\n\t\t// NOTE: We need to shift the decorator range back one character so the splitter does not end up with\n\t\t// two decoration colors (current and splitter), if we take the new line from the content into account\n\t\t// the decorator will wrap to the next line.\n\t\treturn {\n\t\t\tcurrent: {\n\t\t\t\theader: scanned.startHeader.range,\n\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\tscanned.startHeader.rangeIncludingLineBreak.end,\n\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, tokenAfterCurrentBlock.range.start, scanned.startHeader.rangeIncludingLineBreak.end)),\n\t\t\t\t// Current content is range between header (shifted for linebreak) and splitter or common ancestors mark start\n\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\tscanned.startHeader.rangeIncludingLineBreak.end,\n\t\t\t\t\ttokenAfterCurrentBlock.range.start),\n\t\t\t\tname: scanned.startHeader.text.substring(startHeaderMarker.length + 1)\n\t\t\t},\n\t\t\tcommonAncestors: scanned.commonAncestors.map((currentTokenLine, index, commonAncestors) => {\n\t\t\t\tconst nextTokenLine = commonAncestors[index + 1] || scanned.splitter;\n\t\t\t\treturn {\n\t\t\t\t\theader: currentTokenLine.range,\n\t\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\t\tcurrentTokenLine.rangeIncludingLineBreak.end,\n\t\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, nextTokenLine.range.start, currentTokenLine.rangeIncludingLineBreak.end)),\n\t\t\t\t\t// Each common ancestors block is range between one common ancestors token\n\t\t\t\t\t// (shifted for linebreak) and start of next common ancestors token or splitter\n\t\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\t\tcurrentTokenLine.rangeIncludingLineBreak.end,\n\t\t\t\t\t\tnextTokenLine.range.start),\n\t\t\t\t\tname: currentTokenLine.text.substring(commonAncestorsMarker.length + 1)\n\t\t\t\t};\n\t\t\t}),\n\t\t\tsplitter: scanned.splitter.range,\n\t\t\tincoming: {\n\t\t\t\theader: scanned.endFooter.range,\n\t\t\t\tdecoratorContent: new vscode.Range(\n\t\t\t\t\tscanned.splitter.rangeIncludingLineBreak.end,\n\t\t\t\t\tMergeConflictParser.shiftBackOneCharacter(document, scanned.endFooter.range.start, scanned.splitter.rangeIncludingLineBreak.end)),\n\t\t\t\t// Incoming content is range between splitter (shifted for linebreak) and footer start\n\t\t\t\tcontent: new vscode.Range(\n\t\t\t\t\tscanned.splitter.rangeIncludingLineBreak.end,\n\t\t\t\t\tscanned.endFooter.range.start),\n\t\t\t\tname: scanned.endFooter.text.substring(endFooterMarker.length + 1)\n\t\t\t},\n\t\t\t// Entire range is between current header start and incoming header end (including line break)\n\t\t\trange: new vscode.Range(scanned.startHeader.range.start, scanned.endFooter.rangeIncludingLineBreak.end)\n\t\t};\n\t}\n\n\tstatic containsConflict(document: vscode.TextDocument): boolean {\n\t\tif (!document) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst text = document.getText();\n\t\treturn text.includes(startHeaderMarker) && text.includes(endFooterMarker);\n\t}\n\n\tprivate static shiftBackOneCharacter(document: vscode.TextDocument, range: vscode.Position, unlessEqual: vscode.Position): vscode.Position {\n\t\tif (range.isEqual(unlessEqual)) {\n\t\t\treturn range;\n\t\t}\n\n\t\tlet line = range.line;\n\t\tlet character = range.character - 1;\n\n\t\tif (character < 0) {\n\t\t\tline--;\n\t\t\tcharacter = document.lineAt(line).range.end.character;\n\t\t}\n\n\t\treturn new vscode.Position(line, character);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport * as interfaces from './interfaces';\nimport { loadMessageBundle } from 'vscode-nls';\nconst localize = loadMessageBundle();\n\nexport default class MergeDecorator implements vscode.Disposable {\n\n\tprivate decorations: { [key: string]: vscode.TextEditorDecorationType } = {};\n\n\tprivate decorationUsesWholeLine: boolean = true; // Useful for debugging, set to false to see exact match ranges\n\n\tprivate config?: interfaces.IExtensionConfiguration;\n\tprivate tracker: interfaces.IDocumentMergeConflictTracker;\n\tprivate updating = new Map<vscode.TextEditor, boolean>();\n\n\tconstructor(private context: vscode.ExtensionContext, trackerService: interfaces.IDocumentMergeConflictTrackerService) {\n\t\tthis.tracker = trackerService.createTracker('decorator');\n\t}\n\n\tbegin(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\t\tthis.registerDecorationTypes(config);\n\n\t\t// Check if we already have a set of active windows, attempt to track these.\n\t\tvscode.window.visibleTextEditors.forEach(e => this.applyDecorations(e));\n\n\t\tvscode.workspace.onDidOpenTextDocument(event => {\n\t\t\tthis.applyDecorationsFromEvent(event);\n\t\t}, null, this.context.subscriptions);\n\n\t\tvscode.workspace.onDidChangeTextDocument(event => {\n\t\t\tthis.applyDecorationsFromEvent(event.document);\n\t\t}, null, this.context.subscriptions);\n\n\t\tvscode.window.onDidChangeVisibleTextEditors((e) => {\n\t\t\t// Any of which could be new (not just the active one).\n\t\t\te.forEach(e => this.applyDecorations(e));\n\t\t}, null, this.context.subscriptions);\n\t}\n\n\tconfigurationUpdated(config: interfaces.IExtensionConfiguration) {\n\t\tthis.config = config;\n\t\tthis.registerDecorationTypes(config);\n\n\t\t// Re-apply the decoration\n\t\tvscode.window.visibleTextEditors.forEach(e => {\n\t\t\tthis.removeDecorations(e);\n\t\t\tthis.applyDecorations(e);\n\t\t});\n\t}\n\n\tprivate registerDecorationTypes(config: interfaces.IExtensionConfiguration) {\n\n\t\t// Dispose of existing decorations\n\t\tObject.keys(this.decorations).forEach(k => this.decorations[k].dispose());\n\t\tthis.decorations = {};\n\n\t\t// None of our features are enabled\n\t\tif (!config.enableDecorations || !config.enableEditorOverview) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Create decorators\n\t\tif (config.enableDecorations || config.enableEditorOverview) {\n\t\t\tthis.decorations['current.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.currentContentBackground', 'editorOverviewRuler.currentContentForeground', config)\n\t\t\t);\n\n\t\t\tthis.decorations['incoming.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.incomingContentBackground', 'editorOverviewRuler.incomingContentForeground', config)\n\t\t\t);\n\n\t\t\tthis.decorations['commonAncestors.content'] = vscode.window.createTextEditorDecorationType(\n\t\t\t\tthis.generateBlockRenderOptions('merge.commonContentBackground', 'editorOverviewRuler.commonContentForeground', config)\n\t\t\t);\n\t\t}\n\n\t\tif (config.enableDecorations) {\n\t\t\tthis.decorations['current.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.currentHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tafter: {\n\t\t\t\t\tcontentText: ' ' + localize('currentChange', '(Current Change)'),\n\t\t\t\t\tcolor: new vscode.ThemeColor('descriptionForeground')\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.decorations['commonAncestors.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.commonHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border')\n\t\t\t});\n\n\t\t\tthis.decorations['splitter'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t});\n\n\t\t\tthis.decorations['incoming.header'] = vscode.window.createTextEditorDecorationType({\n\t\t\t\tbackgroundColor: new vscode.ThemeColor('merge.incomingHeaderBackground'),\n\t\t\t\tcolor: new vscode.ThemeColor('editor.foreground'),\n\t\t\t\toutlineStyle: 'solid',\n\t\t\t\toutlineWidth: '1pt',\n\t\t\t\toutlineColor: new vscode.ThemeColor('merge.border'),\n\t\t\t\tisWholeLine: this.decorationUsesWholeLine,\n\t\t\t\tafter: {\n\t\t\t\t\tcontentText: ' ' + localize('incomingChange', '(Incoming Change)'),\n\t\t\t\t\tcolor: new vscode.ThemeColor('descriptionForeground')\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tdispose() {\n\n\t\t// TODO: Replace with Map<string, T>\n\t\tObject.keys(this.decorations).forEach(name => {\n\t\t\tthis.decorations[name].dispose();\n\t\t});\n\n\t\tthis.decorations = {};\n\t}\n\n\tprivate generateBlockRenderOptions(backgroundColor: string, overviewRulerColor: string, config: interfaces.IExtensionConfiguration): vscode.DecorationRenderOptions {\n\n\t\tconst renderOptions: vscode.DecorationRenderOptions = {};\n\n\t\tif (config.enableDecorations) {\n\t\t\trenderOptions.backgroundColor = new vscode.ThemeColor(backgroundColor);\n\t\t\trenderOptions.isWholeLine = this.decorationUsesWholeLine;\n\t\t}\n\n\t\tif (config.enableEditorOverview) {\n\t\t\trenderOptions.overviewRulerColor = new vscode.ThemeColor(overviewRulerColor);\n\t\t\trenderOptions.overviewRulerLane = vscode.OverviewRulerLane.Full;\n\t\t}\n\n\t\treturn renderOptions;\n\t}\n\n\tprivate applyDecorationsFromEvent(eventDocument: vscode.TextDocument) {\n\t\tfor (const editor of vscode.window.visibleTextEditors) {\n\t\t\tif (editor.document === eventDocument) {\n\t\t\t\t// Attempt to apply\n\t\t\t\tthis.applyDecorations(editor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async applyDecorations(editor: vscode.TextEditor) {\n\t\tif (!editor || !editor.document) { return; }\n\n\t\tif (!this.config || (!this.config.enableDecorations && !this.config.enableEditorOverview)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If we have a pending scan from the same origin, exit early. (Cannot use this.tracker.isPending() because decorations are per editor.)\n\t\tif (this.updating.get(editor)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.updating.set(editor, true);\n\n\t\t\tconst conflicts = await this.tracker.getConflicts(editor.document);\n\t\t\tif (vscode.window.visibleTextEditors.indexOf(editor) === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (conflicts.length === 0) {\n\t\t\t\tthis.removeDecorations(editor);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Store decorations keyed by the type of decoration, set decoration wants a \"style\"\n\t\t\t// to go with it, which will match this key (see constructor);\n\t\t\tconst matchDecorations: { [key: string]: vscode.Range[] } = {};\n\n\t\t\tconst pushDecoration = (key: string, d: vscode.Range) => {\n\t\t\t\tmatchDecorations[key] = matchDecorations[key] || [];\n\t\t\t\tmatchDecorations[key].push(d);\n\t\t\t};\n\n\t\t\tconflicts.forEach(conflict => {\n\t\t\t\t// TODO, this could be more effective, just call getMatchPositions once with a map of decoration to position\n\t\t\t\tif (!conflict.current.decoratorContent.isEmpty) {\n\t\t\t\t\tpushDecoration('current.content', conflict.current.decoratorContent);\n\t\t\t\t}\n\t\t\t\tif (!conflict.incoming.decoratorContent.isEmpty) {\n\t\t\t\t\tpushDecoration('incoming.content', conflict.incoming.decoratorContent);\n\t\t\t\t}\n\n\t\t\t\tconflict.commonAncestors.forEach(commonAncestorsRegion => {\n\t\t\t\t\tif (!commonAncestorsRegion.decoratorContent.isEmpty) {\n\t\t\t\t\t\tpushDecoration('commonAncestors.content', commonAncestorsRegion.decoratorContent);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (this.config!.enableDecorations) {\n\t\t\t\t\tpushDecoration('current.header', conflict.current.header);\n\t\t\t\t\tpushDecoration('splitter', conflict.splitter);\n\t\t\t\t\tpushDecoration('incoming.header', conflict.incoming.header);\n\n\t\t\t\t\tconflict.commonAncestors.forEach(commonAncestorsRegion => {\n\t\t\t\t\t\tpushDecoration('commonAncestors.header', commonAncestorsRegion.header);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// For each match we've generated, apply the generated decoration with the matching decoration type to the\n\t\t\t// editor instance. Keys in both matches and decorations should match.\n\t\t\tObject.keys(matchDecorations).forEach(decorationKey => {\n\t\t\t\tconst decorationType = this.decorations[decorationKey];\n\n\t\t\t\tif (decorationType) {\n\t\t\t\t\teditor.setDecorations(decorationType, matchDecorations[decorationKey]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} finally {\n\t\t\tthis.updating.delete(editor);\n\t\t}\n\t}\n\n\tprivate removeDecorations(editor: vscode.TextEditor) {\n\t\t// Remove all decorations, there might be none\n\t\tObject.keys(this.decorations).forEach(decorationKey => {\n\n\t\t\t// Race condition, while editing the settings, it's possible to\n\t\t\t// generate regions before the configuration has been refreshed\n\t\t\tconst decorationType = this.decorations[decorationKey];\n\n\t\t\tif (decorationType) {\n\t\t\t\teditor.setDecorations(decorationType, []);\n\t\t\t}\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport DocumentTracker from './documentTracker';\nimport CodeLensProvider from './codelensProvider';\nimport CommandHandler from './commandHandler';\nimport ContentProvider from './contentProvider';\nimport Decorator from './mergeDecorator';\nimport * as interfaces from './interfaces';\n\nconst ConfigurationSectionName = 'merge-conflict';\n\nexport default class ServiceWrapper implements vscode.Disposable {\n\n\tprivate services: vscode.Disposable[] = [];\n\n\tconstructor(private context: vscode.ExtensionContext) {\n\t}\n\n\tbegin() {\n\n\t\tconst configuration = this.createExtensionConfiguration();\n\t\tconst documentTracker = new DocumentTracker();\n\n\t\tthis.services.push(\n\t\t\tdocumentTracker,\n\t\t\tnew CommandHandler(documentTracker),\n\t\t\tnew CodeLensProvider(documentTracker),\n\t\t\tnew ContentProvider(this.context),\n\t\t\tnew Decorator(this.context, documentTracker),\n\t\t);\n\n\t\tthis.services.forEach((service: any) => {\n\t\t\tif (service.begin && service.begin instanceof Function) {\n\t\t\t\tservice.begin(configuration);\n\t\t\t}\n\t\t});\n\n\t\tvscode.workspace.onDidChangeConfiguration(() => {\n\t\t\tthis.services.forEach((service: any) => {\n\t\t\t\tif (service.configurationUpdated && service.configurationUpdated instanceof Function) {\n\t\t\t\t\tservice.configurationUpdated(this.createExtensionConfiguration());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tcreateExtensionConfiguration(): interfaces.IExtensionConfiguration {\n\n\t\t// PRAGMATIC way to avoid conflicting with the new merge editor: when git opts into\n\t\t// using the merge editor we disable this extension - for the merge editor but also\n\t\t// for \"other\" editors\n\t\tconst gitConfig = vscode.workspace.getConfiguration('git');\n\t\tif (gitConfig.get<boolean>('mergeEditor')) {\n\t\t\treturn {\n\t\t\t\tenableCodeLens: false,\n\t\t\t\tenableDecorations: false,\n\t\t\t\tenableEditorOverview: false\n\t\t\t};\n\t\t}\n\n\t\tconst workspaceConfiguration = vscode.workspace.getConfiguration(ConfigurationSectionName);\n\t\tconst codeLensEnabled: boolean = workspaceConfiguration.get('codeLens.enabled', true);\n\t\tconst decoratorsEnabled: boolean = workspaceConfiguration.get('decorators.enabled', true);\n\n\t\treturn {\n\t\t\tenableCodeLens: codeLensEnabled,\n\t\t\tenableDecorations: decoratorsEnabled,\n\t\t\tenableEditorOverview: decoratorsEnabled\n\t\t};\n\t}\n\n\tdispose() {\n\t\tthis.services.forEach(disposable => disposable.dispose());\n\t\tthis.services = [];\n\t}\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport MergeConflictServices from './services';\n\nexport function activate(context: vscode.ExtensionContext) {\n\t// Register disposables\n\tconst services = new MergeConflictServices(context);\n\tservices.begin();\n\tcontext.subscriptions.push(services);\n}\n\nexport function deactivate() {\n}\n\n"],"sourceRoot":""}