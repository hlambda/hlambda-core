env:
  HASURA_GRAPHQL_API_ENDPOINT: 'http://graphql-engine:8099/v1/graphql'
  HASURA_GRAPHQL_ADMIN_SECRET: 'hlambda-test'
  HLAMBDA_DISABLE_CONSOLE: 'false'
  ENABLE_REQUEST_HISTORY: 'true'

  #HLAMBDA_ENABLE_ENVIRONMENT_BANNER: "true"
  #HLAMBDA_ENVIRONMENT_BANNER_NAME: "Local Hlambda Demo Development"
  #HLAMBDA_ENVIRONMENT_BANNER_MESSAGE: "Hello Hlambda Env Banner!"
  #HLAMBDA_ENABLE_ENVIRONMENT_BANNER_COLOR: "#eeFF22"

  #JSON_STDOUT: true

# Custom environment variables override for our app
envForce:
  HASURA_GRAPHQL_API_ENDPOINT: 'http://graphql-engine:8099/v1/graphql'
  HASURA_GRAPHQL_ADMIN_SECRET: 'demo'
  SPECIAL_PASSWORD: 'value-from-env'
  HLAMBDA_DISABLE_CONSOLE: 'false'
  HASURA_GRAPHQL_API_ENDPOINT_EXTERNAL: 'http://localhost:18080/v1/graphql'

# Consider that cwd for the script is ./metadata/ , also we suggest that you do not deploy ts as metadata, only js and do transpilation before metadata apply.
# But if you want you can slow down the reload time and await for scripts to run after every reload.
#postReloadScripts:
#  - npm install --only=production
#  - npx tsc --module ES2020 ./apps/example-demo-app/router.demo-ts.ts

# If used routers and entrypoints are skipped from importing
#ignoreRouters: './*' # use `true` for all
#ignoreEntrypoints: './*' # use `true` for all

# Defines if the app is enabled or not, disabled apps are not applied (configuration is ignored)
#enabled: false # default true

# --- Proposals ---

# # Defines if we want to use namespace or not
# use_namespace: true # NOT IN USE!

# # Define the namespace name
# namespace_name: 'demo_app' # NOT IN USE!
